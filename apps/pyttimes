#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
import sys

import numpy as np

from pyttimes.tau import TauConfig, TauRunner
from pyttimes import util


progname = 'pyttimes'

g_model_filename = '_uvw_.tvel'
g_model_name = '_uvw_'


# Set logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name=progname)


def d2u(d):
    if isinstance(d, dict):
        return dict((k.replace('-', '_'), v) for (k, v) in d.items())
    else:
        return d.replace('-', '_')


subcmd_descriptions = {
    'list-models': 'list built-in velocity models',
    'ttt': 'create seismic travel-time tables and/or grid files'}


subcmd_usages = {
    'list-models': 'list-models [options]',
    'ttt': 'ttt --phase=<phase> --distances=<dist_min:dist_max:delta_dist> '
           '--depths=<depth_min:depth_max:delta_depth> '
           '--model=<model_name|model_file> [--stem=<stem>] [--grid]'}


usage_tdata = d2u(subcmd_descriptions)
usage_tdata['progname'] = progname

usage = """{progname} <subcommand> <arguments> [options]

Subcommands:

    list-models   {list_models}
    ttt           {ttt}

To get further help and a list of available options for any subcommands run:

   {progname} <subcommand> --help
""".format(**usage_tdata)


def add_common_options(parser):
    parser.add_argument(
        '--loglevel',
        metavar='LOGLEVEL', default='info',
        choices=('critical', 'error', 'warning', 'info', 'debug'),
        help='set logger level to "critical", "error", "warning", "info", '
             'or "debug" (default: info)')


# ----- Create the top-level parser -----

top_parser = argparse.ArgumentParser(
    prog=progname,
    description='Python wrapper to generate seismic travel-time '
                'lookup-tables and/or binary grid files')

# Subcommand parser
sub_parser = top_parser.add_subparsers(
    title='subcommands', description='valid subcommands')


def create_subcmd_parser(subcmd, common_opts=True):
    subcmd_parser = sub_parser.add_parser(
        subcmd, description=subcmd_descriptions.get(subcmd),
        usage='{0} {1}'.format(progname, subcmd_usages.get(subcmd)),
        formatter_class=argparse.RawDescriptionHelpFormatter)

    if common_opts:
        add_common_options(subcmd_parser)

    return subcmd_parser


# ----- Subcommand "ttt" -----

def command_ttt(args):

    # Get surface distances
    d_min, d_max, dd = map(float, args.distances.split(':'))
    ds = np.arange(d_min, d_max+dd, dd)

    # Get source depths
    z_min, z_max, dz = map(float, args.depths.split(':'))
    zs = np.arange(z_min, z_max+dz, dz)

    tau_config = TauConfig(
        model=args.model,
        phase_list=[x.strip() for x in args.phase.split(',')],
        file_stem=args.stem,
        dist_array=ds,
        depth_array=zs,
        save_grid=args.grid)

    tau_runner = TauRunner()
    tau_runner.run(tau_config)


ttt_parser = create_subcmd_parser('ttt', common_opts=True)

# Required named args
named_args_ttt = ttt_parser.add_argument_group('required named arguments')

named_args_ttt.add_argument(
    '--phase', required=True, metavar='PHASE',
    help='comma-seperated list of seismic phases in classic nomenclature')

named_args_ttt.add_argument(
    '--distances', required=True, metavar='dist_min:dist_max:delta_dist',
    help='source-receiver surface distances in [deg]')

named_args_ttt.add_argument(
    '--depths', required=True, metavar='depth_min:depth_max:delta_depth',
    help='source depths in [km]')

# Optional args
ttt_parser.add_argument(
    '--model', required=False, default='ak135',
    metavar='NAME or FILENAME',
    help='use built-in model named NAME or user model from file FILENAME.'
         'Run "{} list-models" for a list of built-in models.')

ttt_parser.add_argument(
    '--stem', required=False, metavar='STEM',
    help='file root name (no extension) for output files')

ttt_parser.add_argument(
    '--grid', action='store_true', default=False,
    help='whether to write travel-tile table(s) into NonLinLoc grid file(s)')

ttt_parser.set_defaults(func=command_ttt)


# ----- Subcommand "list-models" -----

def command_list_models(args):
    for x in util.builtin_models():
        print(''.ljust(2) + x)


lsmdl_parser = create_subcmd_parser('list-models', common_opts=False)
lsmdl_parser.set_defaults(func=command_list_models)


if __name__ == '__main__':

    if len(sys.argv) < 2:
        sys.exit('Usage: {}'.format(usage))

    cmd = sys.argv[1]

    if cmd in ('--help', '-h', 'help'):
        sys.exit('Usage: {}'.format(usage))
    else:
        args = top_parser.parse_args()
        args.func(args)
