#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import glob
import logging
import os
import os.path as op
import platform
import shutil
import sys
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile

import numpy as np

from pyttimes.grid import *
from pyttimes.table import *
from pyttimes import util


progname = 'pyttimes'

g_model_filename = '_uvw_.tvel'
g_model_name = '_uvw_'


# Set logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name=progname)


def d2u(d):
    if isinstance(d, dict):
        return dict((k.replace('-', '_'), v) for (k, v) in d.items())
    else:
        return d.replace('-', '_')


subcmd_descriptions = {
    'list-models': 'list built-in velocity models',
    'ttt': 'create seismic travel-time tables and/or grid files'}


subcmd_usages = {
    'list-models': 'list-models [options]',
    'ttt': 'ttt --phase=<phase> --distances=<dist_min:dist_max:delta_dist> '
           '--depths=<depth_min:depth_max:delta_depth> '
           '--model=<model_name|model_file> [--stem=<stem>] [--grid]'}


usage_tdata = d2u(subcmd_descriptions)
usage_tdata['progname'] = progname

usage = """{progname} <subcommand> <arguments> [options]

Subcommands:

    list-models   {list_models}
    ttt           {ttt}

To get further help and a list of available options for any subcommands run:

   {progname} <subcommand> --help
""".format(**usage_tdata)


def add_common_options(parser):
    parser.add_argument(
        '--loglevel',
        metavar='LOGLEVEL', default='info',
        choices=('critical', 'error', 'warning', 'info', 'debug'),
        help='set logger level to "critical", "error", "warning", "info", '
             'or "debug" (default: info)')


# ----- Create the top-level parser -----

top_parser = argparse.ArgumentParser(
    prog=progname,
    description='Python wrapper to generate seismic travel-time '
                'lookup-tables and/or binary grid files')

# Subcommand parser
sub_parser = top_parser.add_subparsers(
    title='subcommands', description='valid subcommands')


def create_subcmd_parser(subcmd, common_opts=True):
    subcmd_parser = sub_parser.add_parser(
        subcmd, description=subcmd_descriptions.get(subcmd),
        usage='{0} {1}'.format(progname, subcmd_usages.get(subcmd)),
        formatter_class=argparse.RawDescriptionHelpFormatter)

    if common_opts:
        add_common_options(subcmd_parser)

    return subcmd_parser


# ----- Subcommand "ttt" -----

def command_ttt(args):

    # Check the velocity model
    model_name = args.model.rstrip('.tvel')
    if not op.exists(args.model) and model_name not in util.builtin_models():
        raise top_parser.error(
            'unsupported model format: {}'.format(args.model))

    # Get surface distances
    d_min, d_max, dd = map(float, args.distances.split(':'))
    ds = np.arange(d_min, d_max+dd, dd)

    # Get source depths
    z_min, z_max, dz = map(float, args.depths.split(':'))
    zs = np.arange(z_min, z_max+dz, dz)

    nd, nz = ds.size, zs.size
    if nz > 200:
        top_parser.error('number of depth samples cannot be greater than 200')

    # Remove redundant files
    exts = ('.hed', '.tbl')
    for ext in exts:
        fn = 'remodl' + ext
        if op.exists(fn):
            os.remove(fn)

    # Make and export required directories
    ttimes_dir = platform.system()
    if not op.isdir(ttimes_dir):
        os.mkdir(ttimes_dir)

    os.environ['TTIMES'] = ttimes_dir

    # Call binaries
    with NamedTemporaryFile(mode='w+t', suffix='.dist', delete=True) as dfile,\
            NamedTemporaryFile(
                mode='w+t', suffix='.depth', delete=True) as zfile:

        # Dump distance and depth values into ascii files
        np.savetxt(dfile, ds, fmt='%.2f')
        np.savetxt(zfile, zs, fmt='%.2f')

        # Return the pointer to the top of the file before reading it,
        # otherwise, just an empty string will be read.
        for f in (dfile, zfile):
            f.seek(0)

        model_fn = (
            op.exists(args.model) and args.model or
            util.builtin_model_filename(model_name))

        with open(model_fn, 'r') as f, open(g_model_filename, 'w') as g:
            g.write(f.read())

        proc_remodl = Popen(['remodl', g_model_name], stdout=PIPE, stderr=PIPE)
        out_remodl, _ = proc_remodl.communicate()
        os.remove(g_model_filename)

        proc_setbrn = Popen(['setbrn'], stdout=PIPE, stderr=PIPE)
        out_setbrn, _ = proc_setbrn.communicate()

        # Remove redundant files
        for ext in exts:
            os.remove('remodl'+ext)

        for fn in glob.glob('setbrn*lis'):
            os.remove(fn)

        # Move ".hed" and ".tbl" files
        for ext in exts:
            src_tail = g_model_name + ext
            dst_full = op.join(ttimes_dir, src_tail)
            shutil.move(src_tail, dst_full)

        # Make the travel-time lookup table
        phases = [x.strip() for x in args.phase.split(',')]
        for phase in phases:
            phase = phase
            proc_lut = Popen(
                ['lookuptable', zfile.name, dfile.name, phase, g_model_name],
                stdout=PIPE, stderr=PIPE)

            out_lut, _ = proc_lut.communicate()

            shutil.rmtree(ttimes_dir)

            head, tail = op.split(args.stem or model_name)
            head = head or op.curdir
            stem = op.join(head, tail)

            fn_tbl = '{}.{}.tab'.format(stem, args.phase)
            util.ensuredirs(fn_tbl)
            if op.exists(fn_tbl):
                os.remove(fn_tbl)

            with open(fn_tbl, 'wb') as fid:
                fid.write(out_lut)

            # Save as NonLinLoc grid file, if requested
            if args.grid:

                tbl = read_lookup_table(
                    out_lut.splitlines(), nd=nd, nz=nz, getmeta=False)

                nll_grid = NLLGrid(
                    basename=stem,
                    float_type='FLOAT',
                    grid_type='TIME2D',
                    wave_type=phase,
                    station=None,
                    shape=GridShape(nx=1, ny=nd, nz=nz),
                    origin=GridOrigin(x=0., y=d_min, z=z_min),
                    spacing=GridSpacing(dx=0., dy=dd, dz=dz),
                    data_array=tbl.data_array[np.newaxis, :, :])

                nll_grid.write_hdr()
                nll_grid.write_buf()


ttt_parser = create_subcmd_parser('ttt', common_opts=True)

# Required named args
named_args_ttt = ttt_parser.add_argument_group('required named arguments')

named_args_ttt.add_argument(
    '--phase', required=True, metavar='PHASE',
    help='comma-seperated list of seismic phases in classic nomenclature')

named_args_ttt.add_argument(
    '--distances', required=True, metavar='dist_min:dist_max:delta_dist',
    help='source-receiver surface distances in [deg]')

named_args_ttt.add_argument(
    '--depths', required=True, metavar='depth_min:depth_max:delta_depth',
    help='source depths in [km]')

# Optional args
ttt_parser.add_argument(
    '--model', required=False, default='ak135.tvel',
    metavar='NAME or FILENAME',
    help='use built-in model named NAME or user model from file FILENAME.'
         'Run "{} list-models" for a list of built-in models.')

ttt_parser.add_argument(
    '--stem', required=False, metavar='STEM',
    help='file root name (no extension) for output files')

ttt_parser.add_argument(
    '--grid', action='store_true', default=False,
    help='whether to write travel-tile table(s) into NonLinLoc grid file(s)')

ttt_parser.set_defaults(func=command_ttt)


# ----- Subcommand "list-models" -----

def command_list_models(args):
    for x in util.builtin_models():
        print(''.ljust(2) + x)


lsmdl_parser = create_subcmd_parser('list-models', common_opts=False)
lsmdl_parser.set_defaults(func=command_list_models)


if __name__ == '__main__':

    if len(sys.argv) < 2:
        sys.exit('Usage: {}'.format(usage))

    cmd = sys.argv[1]

    if cmd in ('--help', '-h', 'help'):
        sys.exit('Usage: {}'.format(usage))
    else:
        args = top_parser.parse_args()
        args.func(args)
